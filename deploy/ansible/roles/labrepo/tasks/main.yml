---

- name: Copy nginx configuration for labrepo
  template: src=nginx.conf dest=/etc/nginx/sites-available/{{ server_hostname }}
  notify: restart nginx
  sudo: yes

- name: Create symlink to site nginx config
  file: src=/etc/nginx/sites-available/{{ server_hostname }} dest=/etc/nginx/sites-enabled/{{ server_hostname }} state=link
  notify: restart nginx
  sudo: yes

- name: Copy supervisor config for django
  template: src=supervisor_django.conf dest=/etc/supervisor/conf.d/django_{{ project_name }}.conf
  notify: restart labrepo
  sudo: yes

- name: Copy supervisor config for celery
  template: src=supervisor_celery.conf dest=/etc/supervisor/conf.d/celery_{{ project_name }}.conf
  notify: restart labrepo
  sudo: yes

- name: Copy supervisor config for labrepo chat
  template: src=supervisor_chat.conf dest=/etc/supervisor/conf.d/chat_{{ project_name }}.conf
  notify: restart labrepo
  sudo: yes

- name: Add postgresql db
  postgresql_db: name={{ postgresql_dbname }}
  sudo: yes
  sudo_user: postgres

- name: Add a postgresql user
  postgresql_user: db={{ postgresql_dbname }}   name={{ postgresql_user }}   password={{ postgresql_password }}   role_attr_flags=CREATEDB
  sudo: yes
  sudo_user: postgres


- name: Get code from git repo
  git: repo={{ git_repo }} dest={{ project_dir }} accept_hostkey=yes force=yes
  notify: restart labrepo

- name: Check logs directory
  file: path={{ project_dir }}/logs state=directory

- stat: path=/swapfile
  register: swapfile_rules
  sudo: yes

- name: Create swap(Note! You may disable if a server have enought memory)
  command: "{{ item }}"
  with_items:
    -  "fallocate -l 4G /swapfile"
    -  "chmod 600 /swapfile"
    -  "mkswap /swapfile"
    -  "swapon /swapfile"
  sudo: yes
  when: swapfile_rules.stat.exists == False

- name: Install labrepo requirements
  pip: requirements={{ project_dir }}/requirements.txt virtualenv={{ project_dir }}/env/

- name: Create a django dotenv settings file
  template: src=django_settings.conf dest={{ project_dir}}/settings/.env


- include: static.yml

- name: Delete old .pyc files
  command: find . -name '*.pyc' -delete chdir="{{ project_dir }}"
  sudo: yes

- name: Collect static
  django_manage: command="collectstatic --noinput --verbosity=0" app_path={{ project_dir }} virtualenv={{ project_dir }}/env/
  environment:
        DJANGO_SETTINGS_MODULE: "settings.{{ django_settings_file }}"

- name: Migrate database
  django_manage: command="migrate" app_path={{ project_dir }} virtualenv={{ project_dir }}/env/
  environment:
        DJANGO_SETTINGS_MODULE: "settings.{{ django_settings_file }}"

- name: Make django messages
  django_manage: '{{ item }}'
  with_items:
#    - 'command="makemessages -a --ignore=env/*" app_path={{ project_dir }} virtualenv={{ project_dir }}/env/'
#    - 'command="makemessages -d djangojs -a --ignore=env/*" app_path={{ project_dir }} virtualenv={{ project_dir }}/env/'
    - 'command="compilemessages" app_path={{ project_dir }} virtualenv={{ project_dir }}/env/'
  environment:
        DJANGO_SETTINGS_MODULE: "settings.{{ django_settings_file }}"

- name: Update elasticsearch mapping types
  django_manage: command="createesindex" app_path={{ project_dir }} virtualenv={{ project_dir }}/env/
  environment:
        DJANGO_SETTINGS_MODULE: "settings.{{ django_settings_file }}"

- name: Create test user
  django_manage: command="createtestuser" app_path={{ project_dir }} virtualenv={{ project_dir }}/env/
  environment:
        DJANGO_SETTINGS_MODULE: "settings.{{ django_settings_file }}"

- name: Create test lab
  django_manage: command="createtestlab" app_path={{ project_dir }} virtualenv={{ project_dir }}/env/
  environment:
        DJANGO_SETTINGS_MODULE: "settings.{{ django_settings_file }}"

- name: Run tests
  django_manage: command="test --noinput --failfast" app_path={{ project_dir }} virtualenv={{ project_dir }}/env/
  environment:
        DJANGO_SETTINGS_MODULE: "settings.testing"


- name: Check supervisor service
  service: name=supervisor state=started enabled=yes
  sudo: yes

- name: Check nginx service
  service: name=nginx state=started enabled=yes
  sudo: yes

- name: Force restart of labrepo
  command: /bin/true
  notify: restart supervisor
  notify: restart nginx
  notify: restart labrepo



